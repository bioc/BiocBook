# Writing a `BiocBook` package

## Register a Github account in R

::: {.callout-tip icon='true'}

Skip this section if your Github account is already 
registered. You can check this by typing: 

```{r}
#| eval: false
gh::gh_whoami()
```

:::

### Creating a new Github token

```{r}
#| eval: false
usethis::create_github_token(
    description = "BiocBook", 
    scopes = c("public_repo", "user:email", "workflow")
)
```

This command will open up a new web browser. On the displayed Github page: 

- Select an Expiration date;
- Make sure that at least `repo > public_repo` and `user > user:email` scopes are selected;
- Click on "Generate token" at the bottom of the page;
- Copy your Github token displayed in the Github web page

### Register your new token in R

```{r}
#| eval: false
gitcreds::gitcreds_set()
```

Paste your new Github token here and press "Enter".

### Double check you are logged in

```{r}
#| eval: false
gh::gh_whoami()
```

### Saving your Github token for later use 

You may also want to add your Github token to `~/.Renviron` to save it for 
futur use. You can edit the `~/.Renviron` by typing `usethis::edit_r_environ()`, 
and define the `GITHUB_PAT` environment variable: 

```{txt filename=".Renviron"}
GITHUB_PAT="<YOUR-TOKEN>"
```

## Initiate a `BiocBook` package

::: {.panel-tabset group="tools-tabset"}

### R

Creating a `BiocBook` in `R` is straightforward with the `BiocBook` package. 

```{r}
#| eval: false
if (!require(BiocBook)) remotes::install_github('js2264/BiocBook')
library(BiocBook)
biocbook <- BiocBook_init("myBook")
```

The steps performed under the hood by `BiocBook_init()` are detailed in the 
console. Briefly, the following steps are followed: 

1. Creating a Github repository in your account, using the `js2264/BiocBook.template` repository as a template
2. Clone the Github package locally
3. Fillout placeholders from the template
4. Committing and pushing the changes to Github

### VS Code

::: {.callout-warning icon='true'}

#### This approach is significantly more hazardous. It is highly recommended to stick to the `BiocBook_init()` helper function from the `BiocBook` package. 

:::

#### Use the `BiocBook.template` package template {-}

This template is available from 
[`js2264/BiocBook.template`](https://github.com/js2264/BiocBook.template)

![](images/use_template.png)

#### Create a new repo {-}

![](images/new_repo.png){width="70%"}

#### Enter VS Code editor by pressing `.` {-}

![](images/github_vscode.png)

#### Fillout placeholders {-}

::: {.callout-warning icon='true'}

Three types of placeholders need to be replaced: 

1. `<Package_name>`
2. `<package_name>`
3. `<github_user>`

Four different files contain these placeholders: 

1. `/inst/assets/_book.yml`
2. `/DESCRIPTION`
3. `/index.qmd`
4. `/.github/workflows/build-and-deploy.yaml`

:::

![](images/github_edit.png)

#### Commit changes {-}

![](images/github_commit.png)

#### Clone the package to a local computer {-}

:::

## Edit new `BiocBook` chapters

- `add_chapter(biocbook, title)` is used to write new chapters; 
- `add_preamble(biocbook)` is used to add an unnumbered extra page after the Welcome 
page but before the chapters begin.

## Publishing changes

Once you are done writing pages of your new book, you should always commit 
your changes and push them to Github. 

Within R, this can be done as follows: 

```{r}
gert::git_commit_all(message = "publishing", repo = path(biocbook))
```

## Enabling `Github Pages` to be deployed

Once you have pushed a first commit to Github, you will need to enable the 
Github Pages service. 

- Go to your new `Github` repository;
- Open the "Settings" tab;
- On the leftside bar, clik on the "Pages" tab;
- Select the `gh-pages` branch and the `/docs` folder to deploy your Github Pages.

![](images/gh_pages.png)

## Writing features 

### Executing code

It's super easy to execute actual code from any `BiocBook` page when rendering the `BiocBook` website. 

#### `R` code

`R` code can be executed and rendered: 

```{r filename="R"}
utils::packageVersion("BiocVersion")
```

#### `bash` code

`bash` code can also be executed and rendered: 

```{sh filename="bash"}
find ../ -name "*.qmd"
```

<!-- 
#### `python` code

Finally, `python` code can also be executed and rendered: 

```{python filename="python"}
#| eval: false
import os
os.getcwd()
```

For the rendering of `python` code, you will be limited to 
the `python` packages installed in the Github worker. These packages can be 
listed in the `inst/assets/requirements.txt` file, e.g.: 

```{txt filename="requirements.txt"}
#| eval: false
numpy
pandas >= 2.0.0
```
 -->

### Adding references

References can be listed as `.bib` entries in the bibliography file located in 
`inst/assets/bibliography.bib`. The references can be added in-line using the @ notation, 
e.g. by typing **\@serizay2023**, this will insert the following reference: **@serizay2023**. 
