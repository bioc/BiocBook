# Preamble {-}

## Aims of `BiocBook`s

A researcher/scientist/author/teacher/communicator may want to rely on 
a `BiocBook` package to: 

1. *Write*: draw up a compendium combining biological knowledge and bioinformatics aspects;
2. *Containerize*: provide a Docker image to reproduce the same bioinformatics operations as illustrated in the compendium;
3. *Publish*: deploy a website to disseminate the compendium; 
4. *Versionize*: synchronize the versioning of (1) the package, (2) the website and (3) the Docker images with the [Bioconductor release life cycle](https://contributions.bioconductor.org/use-devel.html). 

::: {.callout-tip icon='true'}
## A `BiocBook` package in Bioconductor release `X.Y` provides a **Docker image** and a **`BiocBook` website**, both built against this specific Bioconductor release `X.Y`.
:::

In this website, a `BiocBook` can refer to the **package**, the **Docker image** or the **website**. We will 
make our best to clarify from this point forward. 

## Mechanics 

### First things first

- Any **package** built using the `BiocBook` package is itself a `BiocBook` package;
- As such, it follows the release schedule from `Bioconducor`; 
- The `pages/` folder contains a number of pages which can be rendered as a **website** using Quarto; 
- Rendering of the `BiocBook` **package** as (1) a **Docker image** and (2) a `BiocBook` **website** is currently performed by a Github Actions workflow; 

### Pushing to github

When pushing a `BiocBook` **package** from a local `devel` branch to Github, this will trigger two events: 

1. First, a **Docker image** will be created to build the `BiocBook` package against the Bioconductor `devel` branch and push the resulting image to `ghcr.io/<github_user>/<package_name>:devel`;
2. Then, this image will be used to render the `BiocBook` **website** and deploy it to `https://<github_user>.github.io/<package_name>/devel/`

When Bioconductor releases a version `X.Y`, the core team will automatically create a new `upstream:<package_name>@RELEASE_X_Y`. 
This branch should be pulled to `origin:<package_name>@RELEASE_X_Y`. This will automatically: 

1. Create a **Docker image** @ `ghcr.io/<github_user>/<package_name>:RELEASE_X_Y`, with the `BiocBook` **package** installed using Bioconductor `X.Y`;
2. Publish the `BiocBook` **website** to `https://<github_user>.github.io/<package_name>/X.Y/`, using packages from Bioconductor `X.Y`.

### Branch naming convention

The **name** of the branch (`devel` or `RELEASE_X_Y`) is used to select a 
Bioconductor version to 1) build a **Docker image** for the `BiocBook` package 
and 2) render the `BiocBook` **website**. 

Any other branch name (e.g. `main`, `hotfix-...`, etc.) can be used but won't 
trigger Docker image building and website rendering. 

::: {.callout-warning icon='true'}
We recommend setting the default branch name to `devel`, to automatically 
build/publish against the most recent changes in Bioconductor. 
:::

## Versions

### Package versioning

A `BiocBook` **package** can follow its own release life cycle (@serizay2023). That being said, 
if the author of a `BiocBook` **package** intends to submit this package/book/website 
to Bioconductor, two points should be kept in mind: 

- When developing the `BiocBook` **package** (before and during submission), the `BiocBook` **package** version should be between `0.99.0` and `1.0.0`. 
- Once Bioconductor submission is accepted and Bioconductor releases a new version `X.Y`, the `BiocBook` **package** version will automatically be bumped to `1.0.0` in Bioconductor release `X.Y` and to `1.1.0` in the continuing Bioconductor `devel`.

### Docker image versioning

The different versions of a `BiocBook` **Docker image** are availabed at the following URL: 

`ghcr.io/<github_user>/<package_name>`

For example, for this package (`BiocBook`), the following **Docker image** versions are available: 

- [ghcr.io/js2264/biocbook:3.17](https://github.com/js2264?tab=packages&repo_name=BiocBook)
- [ghcr.io/js2264/biocbook:devel](https://github.com/js2264?tab=packages&repo_name=BiocBook) **<-- Current**

### Website versioning

The different versions of a `BiocBook` **website** are hosted at the following URL: 

`https://<github_user>.github.io/<package_name>/<version>`

For example, for this package (`BiocBook`), the following **website** versions are available: 

- [https://js2264.github.io/BiocBook/3.17/](https://js2264.github.io/BiocBook/3.17/)
- [https://js2264.github.io/BiocBook/devel/](https://js2264.github.io/BiocBook/devel/) **<-- Current**

## Does this really work? 

The `R_BIOC_VERSION` variable is available in the `BiocBook` Docker image (used 
to render this website) to check what BioC release is being used: 

```{r filename="R"}
Sys.getenv("R_BIOC_VERSION")
```

Note that this variable will always match the `X.Y` version returned by `BiocVersion` 
used to render this 

```{r filename="R"}
packageVersion("BiocVersion")
```

## So what packages can I use? 

Any package that has been released in the Bioconductor version you are using
(in this book version, this is `r Sys.getenv("R_BIOC_VERSION")`).

The `HiContacts` package is available in Bioconductor since `3.16`, 
while the `HiCExperiment` package was only made available in `3.17`. 
`MICSQTL` has recently been accepted in `3.18` (current `devel`, on `r date()`).
Let's check this!

```{r}
BiocManager::available("HiContacts")
BiocManager::available("HiCExperiment")
BiocManager::available("MICSQTL")
```

